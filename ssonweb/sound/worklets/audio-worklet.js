AudioWorkletProcessor.prototype._n=function(){this._o=true;this.port.onmessage=(_p)=>{if(_p.data==="kill")this._o=false;};};class _q extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1}];}constructor(){super();this._n();}process(_r,_s,parameters){const input=_r[0];const bypass=parameters.bypass;for(let c=0;c<input.length;++c){const _t=input[c];for(let _u=0;_u<_t.length;++_u){const _v=(bypass[_u]!==undefined)?bypass[_u]:bypass[0];
_s[_v][c][_u]=_t[_u];}}return this._o;}}class _w extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"gain",automationRate:"a-rate",defaultValue:1,minValue:0}];}constructor(){super();this._n();}process(_r,_s,parameters){const _x=_r[0];const _y=_r[1];const output=_s[0];const gain=parameters.gain;for(let c=0;c<_y.length;++c){const _t=_y[c];const _z=output[c];for(let _u=0;_u<_t.length;++_u)_z[_u]=_t[_u];}for(let c=0;c<_x.length;++c){const _t=_x[c];const _z=output[c];for(let _u=0;_u<_t.length;
++_u){const _A=(gain[_u]!==undefined)?gain[_u]:gain[0];_z[_u]+=_t[_u]*_A;}}return this._o;}}registerProcessor("audio-bus-input",_q);registerProcessor("audio-bus-output",_w);class _B extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"gain",automationRate:"a-rate",defaultValue:1.0,minValue:0.0},{name:"factor",automationRate:"a-rate",defaultValue:20,minValue:1,maxValue:100},{name:"resolution",automationRate:"a-rate",
defaultValue:8,minValue:2,maxValue:16},{name:"mix",automationRate:"a-rate",defaultValue:0.8,minValue:0.0,maxValue:1.0}];}static _C=[undefined,undefined,2,4,8,16,32,64,128,256,512,1024,2048,4096,8192,16384,32768];constructor(_D){super();this._n();const _E=_D.outputChannelCount[0];this._F=new Float32Array(_E);this._G=new Uint32Array(_E);}process(_r,_s,parameters){const input=_r[0];const output=_s[0];const bypass=parameters.bypass;const gain=parameters.gain;const factor=parameters.factor;const resolution=parameters.resolution;
const mix=parameters.mix;for(let c=0;c<input.length;++c){const _t=input[c];const _z=output[c];for(let _u=0;_u<_t.length;++_u){_z[_u]=_t[_u];if(this._G[c]===0)this._F[c]=_t[_u];const _H=(factor[_u]!==undefined)?factor[_u]:factor[0];++this._G[c];this._G[c]%=_H;const _v=(bypass[_u]!==undefined)?bypass[_u]:bypass[0];if(_v>0.0){continue;}let _I=this._F[c];const _A=(gain[_u]!==undefined)?gain[_u]:gain[0];_I*=_A;_I=Math.max(Math.min(_I,1.0),-1.0);const _J=(resolution[_u]!==undefined)?resolution[_u]:resolution[0];
const max=(_I>0.0)?_B._C[_J]-1:_B._C[_J];_I=Math.round(_I*max)/max;const _K=(mix[_u]!==undefined)?mix[_u]:mix[0];_z[_u]*=(1.0-_K);_z[_u]+=(_I*_K);}}return this._o;}}registerProcessor("bitcrusher-processor",_B);class _L{constructor(_M=1e-3){this.setTime(_M);}setTime(_M){this._N=Math.exp(-1/(_M*sampleRate));}process(_O,_P){return _O+this._N*(_P-_O);}}class _Q{constructor(_R,_S){this._T=new _L(_R);this._U=new _L(_S);this._V=_R;this._W=_S;}_X(_M){if(_M===this._V)return;this._T.setTime(_M);this._V=_M;}_Y(_M){
if(_M===this._W)return;this._U.setTime(_M);this._W=_M;}process(_O,_P){if(_O>_P)return this._T.process(_O,_P);else return this._U.process(_O,_P);}}class _Z extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"ingain",automationRate:"a-rate",defaultValue:1,minValue:0},{name:"threshold",automationRate:"a-rate",defaultValue:0.125,minValue:1e-3,maxValue:1},{name:"ratio",automationRate:"a-rate",defaultValue:4,
minValue:1},{name:"attack",automationRate:"a-rate",defaultValue:0.05,minValue:1e-3,maxValue:1e-1},{name:"release",automationRate:"a-rate",defaultValue:0.25,minValue:1e-2,maxValue:1},{name:"outgain",automationRate:"a-rate",defaultValue:1,minValue:0}];}constructor(__){super();this._n();const _T=_Z.parameterDescriptors.find(_01=>_01.name==="attack");const _U=_Z.parameterDescriptors.find(_01=>_01.name==="release");this._11=new _Q(_T.defaultValue,_U.defaultValue);this._21=0;}process(_31,_41,_51){const input=_31[0];
const output=_41[0];const bypass=_51.bypass;const ingain=_51.ingain;const outgain=_51.outgain;const threshold=_51.threshold;const ratio=_51.ratio;const attack=_51.attack;const release=_51.release;if(input.length===0)return this._o;for(let _u=0;_u<input[0].length;++_u){let frame=input.map(_61=>_61[_u]);output.forEach((_61,_71)=>{_61[_u]=frame[_71];});const _81=(ingain[_u]!==undefined)?ingain[_u]:ingain[0];frame=frame.map(_91=>_91*=_81);const rect=frame.map(_91=>Math.abs(_91));const max=Math.max(...rect);const _a1=_b1(max);
const _c1=(threshold[_u]!==undefined)?threshold[_u]:threshold[0];const _d1=_b1(_c1);const _e1=Math.max(0,_a1-_d1);const _T=(attack[_u]!==undefined)?attack[_u]:attack[0];const _U=(release[_u]!==undefined)?release[_u]:release[0];this._11._X(_T);this._11._Y(_U);this._21=this._11.process(_e1,this._21);const _v=(bypass[_u]!==undefined)?bypass[_u]:bypass[0];if(_v>0)continue;const _J=(ratio[_u]!==undefined)?ratio[_u]:ratio[0];const _f1=(this._21/_J)-this._21;const _A=_g1(_f1);frame=frame.map(_91=>_91*=_A);const _h1=(outgain[_u]!==undefined)?outgain[_u]:outgain[0];
frame=frame.map(_91=>_91*=_h1);output.forEach((_61,_71)=>{_61[_u]=frame[_71];});}return this._o;}}function _b1(_i1){return 20*Math.log10(_i1);}function _g1(_i1){return Math.pow(10,_i1/20);}registerProcessor("compressor-processor",_Z);class _j1 extends AudioWorkletProcessor{static _k1=5.0;static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"time",automationRate:"a-rate",defaultValue:0.2,minValue:0.0,maxValue:_j1._k1},{name:"feedback",automationRate:"a-rate",
defaultValue:0.5,minValue:0.0,maxValue:1.0},{name:"mix",automationRate:"a-rate",defaultValue:0.35,minValue:0.0,maxValue:1.0}];}constructor(_D){super();this._n();const _E=_D.outputChannelCount[0];const _l1=(_j1._k1*sampleRate)+1;this.buffer=new Array(_E);this._m1=new Uint32Array(_E);for(let c=0;c<_E;++c)this.buffer[c]=new Float32Array(_l1);}process(_r,_s,parameters){const input=_r[0];const output=_s[0];const bypass=parameters.bypass;const time=parameters.time;const feedback=parameters.feedback;const mix=parameters.mix;
for(let c=0;c<input.length;++c){const _t=input[c];const _z=output[c];for(let _u=0;_u<_t.length;++_u){_z[_u]=_t[_u];const _c1=(time[_u]!==undefined)?time[_u]:time[0];const _n1=this._o1(c,_c1);const _H=(feedback[_u]!==undefined)?feedback[_u]:feedback[0];const _p1=_t[_u]+(_n1*_H);this.write(c,_p1);const _v=(bypass[_u]!==undefined)?bypass[_u]:bypass[0];if(_v>0.0){continue;}const _K=(mix[_u]!==undefined)?mix[_u]:mix[0];_z[_u]*=(1-_K);_z[_u]+=(_n1*_K);}}return this._o;}_o1(_q1,_M){const _r1=_M*sampleRate;let _s1=(this._m1[_q1]-~~_r1);
let _t1=(_s1-1);while(_s1<0)_s1+=this.buffer[_q1].length;while(_t1<0)_t1+=this.buffer[_q1].length;const frac=_r1-~~_r1;const _u1=this.buffer[_q1][_s1];const _v1=this.buffer[_q1][_t1];return _u1+(_v1-_u1)*frac;}write(_q1,_w1){++this._m1[_q1];this._m1[_q1]%=this.buffer[_q1].length;this.buffer[_q1][this._m1[_q1]]=_w1;}}registerProcessor("delay-processor",_j1);class _x1 extends AudioWorkletProcessor{static get parameterDescriptors(){return [];}constructor(){super();this._n();}process(_y1,_z1,_A1){const input=_y1[0];
const _B1=_z1[0];const _C1=_z1[1];for(let c=0;c<input.length;++c){const _t=input[c];const _D1=_B1[c];const _E1=_C1[c];for(let _u=0;_u<_t.length;++_u){_D1[_u]=_t[_u];_E1[_u]=_t[_u];}}return this._o;}}class _F1 extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1}];}constructor(){super();this._n();}process(_y1,_z1,_A1){const _x=_y1[0];const _y=_y1[1];const output=_z1[0];const bypass=_A1.bypass;for(let c=0;c<_y.length;++c){
const _G1=_x[c];const _H1=_y[c];const _z=output[c];for(let _u=0;_u<_G1.length;++_u){const _v=(bypass[_u]!==undefined)?bypass[_u]:bypass[0];if(_v>0){_z[_u]=_H1[_u];}else {_z[_u]=_G1[_u];}}}return this._o;}}registerProcessor("eq-input",_x1);registerProcessor("eq-output",_F1);class _I1 extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"gain",automationRate:"a-rate",defaultValue:0.5,minValue:0.0}];}constructor(){
super();this._n();}process(_r,_s,parameters){const input=_r[0];const output=_s[0];const bypass=parameters.bypass;const gain=parameters.gain;for(let c=0;c<input.length;++c){const _t=input[c];const _z=output[c];for(let _u=0;_u<_t.length;++_u){_z[_u]=_t[_u];const _v=(bypass[_u]!==undefined)?bypass[_u]:bypass[0];if(_v>0.0){continue;}const _A=(gain[_u]!==undefined)?gain[_u]:gain[0];_z[_u]*=_A;}}return this._o;}}registerProcessor("gain-processor",_I1);class _J1 extends AudioWorkletProcessor{static get parameterDescriptors(){
const _K1=sampleRate*0.45;return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"freq",automationRate:"a-rate",defaultValue:Math.min(5000.0,_K1),minValue:10.0,maxValue:_K1},{name:"q",automationRate:"a-rate",defaultValue:1.0,minValue:1.0,maxValue:100.0},{name:"gain",automationRate:"a-rate",defaultValue:1e-2,minValue:1e-6}];}constructor(_D){super();this._n();const _E=_D.outputChannelCount[0];this._L1=0;this._M1=0;this._N1=0;this._O1=0;this._P1=0;this._Q1=new Float32Array(_E);
this._R1=new Float32Array(_E);this._S1=new Float32Array(_E);this._T1=new Float32Array(_E);this._U1=-1;this._V1=-1;this._W1=-1;}process(_r,_s,parameters){const input=_r[0];const output=_s[0];const bypass=parameters.bypass;const freq=parameters.freq;const q=parameters.q;const gain=parameters.gain;const _X1=(freq.length===1&&q.length===1&&gain.length===1);if(_X1)this._Y1(freq[0],q[0],gain[0]);for(let c=0;c<input.length;++c){const _t=input[c];const _z=output[c];for(let _u=0;_u<_t.length;++_u){if(_X1===false){const _H=(freq[_u]!==undefined)?freq[_u]:freq[0];
const _Z1=(q[_u]!==undefined)?q[_u]:q[0];const _A=(gain[_u]!==undefined)?gain[_u]:gain[0];this._Y1(_H,_Z1,_A);}const __1=this._N1*_t[_u]+this._O1*this._Q1[c]+this._P1*this._R1[c]-this._L1*this._S1[c]-this._M1*this._T1[c];this._R1[c]=this._Q1[c];this._Q1[c]=_t[_u];this._T1[c]=this._S1[c];this._S1[c]=__1;const _v=(bypass[_u]!==undefined)?bypass[_u]:bypass[0];_z[_u]=(_v>0)?_t[_u]:__1;}}return this._o;}_Y1(_02,_12,_22){if(_02===this._U1&&_12===this._V1&&_22===this._W1)return;const _32=2*Math.PI*_02/sampleRate;
const _42=Math.cos(_32);const _52=Math.sqrt(_22);const _62=_52+1;const _72=_52-1;const _82=_62*_42;const _92=_72*_42;const _a2=_62-_92;const _b2=_62+_92;const alpha=Math.sin(_32)/(2*_12);const _c2=(2*Math.sqrt(_52)*alpha);const _d2=_a2+_c2;const _L1=2*(_72-_82);const _M1=_a2-_c2;const _N1=_52*(_b2+_c2);const _O1=-2*_52*(_72+_82);const _P1=_52*(_b2-_c2);this._L1=_L1/_d2;this._M1=_M1/_d2;this._N1=_N1/_d2;this._O1=_O1/_d2;this._P1=_P1/_d2;this._U1=_02;this._V1=_12;this._W1=_22;}}registerProcessor("hi-shelf-processor",
_J1);class _e2 extends AudioWorkletProcessor{static get parameterDescriptors(){const _f2=sampleRate*0.45;return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"cutoff",automationRate:"a-rate",defaultValue:Math.min(1500.0,_f2),minValue:10.0,maxValue:_f2},{name:"q",automationRate:"a-rate",defaultValue:1.5,minValue:1.0,maxValue:100.0}];}constructor(_D){super();this._n();const _E=_D.outputChannelCount[0];this._L1=0;this._M1=0;this._N1=0;this._O1=0;this._P1=0;this._Q1=new Float32Array(_E);
this._R1=new Float32Array(_E);this._S1=new Float32Array(_E);this._T1=new Float32Array(_E);this._g2=-1;this._V1=-1;}process(_r,_s,parameters){const input=_r[0];const output=_s[0];const bypass=parameters.bypass;const cutoff=parameters.cutoff;const q=parameters.q;const _X1=(cutoff.length===1&&q.length===1);if(_X1)this._Y1(cutoff[0],q[0]);for(let c=0;c<input.length;++c){const _t=input[c];const _z=output[c];for(let _u=0;_u<_t.length;++_u){if(_X1===false){const c=(cutoff[_u]!==undefined)?cutoff[_u]:cutoff[0];const _Z1=(q[_u]!==undefined)?q[_u]:q[0];
this._Y1(c,_Z1);}const __1=this._N1*_t[_u]+this._O1*this._Q1[c]+this._P1*this._R1[c]-this._L1*this._S1[c]-this._M1*this._T1[c];this._R1[c]=this._Q1[c];this._Q1[c]=_t[_u];this._T1[c]=this._S1[c];this._S1[c]=__1;const _v=(bypass[_u]!==undefined)?bypass[_u]:bypass[0];_z[_u]=(_v>0)?_t[_u]:__1;}}return this._o;}_Y1(_h2,_12){if(_h2===this._g2&&_12===this._V1)return;const _32=2*Math.PI*_h2/sampleRate;const alpha=Math.sin(_32)/(2*_12);const _42=Math.cos(_32);const _d2=1+alpha;const _L1=-2*_42;const _M1=1-alpha;const _N1=(1+_42)/2;
const _O1=-1-_42;const _P1=(1+_42)/2;this._L1=_L1/_d2;this._M1=_M1/_d2;this._N1=_N1/_d2;this._O1=_O1/_d2;this._P1=_P1/_d2;this._g2=_h2;this._V1=_12;}}registerProcessor("hpf2-processor",_e2);class _i2 extends AudioWorkletProcessor{static get parameterDescriptors(){const _K1=sampleRate*0.45;return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"freq",automationRate:"a-rate",defaultValue:Math.min(500.0,_K1),minValue:10.0,maxValue:_K1},{name:"q",automationRate:"a-rate",defaultValue:1.0,
minValue:1.0,maxValue:100.0},{name:"gain",automationRate:"a-rate",defaultValue:1e-2,minValue:1e-6}];}constructor(_D){super();this._n();const _E=_D.outputChannelCount[0];this._L1=0;this._M1=0;this._N1=0;this._O1=0;this._P1=0;this._Q1=new Float32Array(_E);this._R1=new Float32Array(_E);this._S1=new Float32Array(_E);this._T1=new Float32Array(_E);this._U1=-1;this._V1=-1;this._W1=-1;}process(_r,_s,parameters){const input=_r[0];const output=_s[0];const bypass=parameters.bypass;const freq=parameters.freq;const q=parameters.q;
const gain=parameters.gain;const _X1=(freq.length===1&&q.length===1&&gain.length===1);if(_X1)this._Y1(freq[0],q[0],gain[0]);for(let c=0;c<input.length;++c){const _t=input[c];const _z=output[c];for(let _u=0;_u<_t.length;++_u){if(_X1===false){const _H=(freq[_u]!==undefined)?freq[_u]:freq[0];const _Z1=(q[_u]!==undefined)?q[_u]:q[0];const _A=(gain[_u]!==undefined)?gain[_u]:gain[0];this._Y1(_H,_Z1,_A);}const __1=this._N1*_t[_u]+this._O1*this._Q1[c]+this._P1*this._R1[c]-this._L1*this._S1[c]-this._M1*this._T1[c];
this._R1[c]=this._Q1[c];this._Q1[c]=_t[_u];this._T1[c]=this._S1[c];this._S1[c]=__1;const _v=(bypass[_u]!==undefined)?bypass[_u]:bypass[0];_z[_u]=(_v>0)?_t[_u]:__1;}}return this._o;}_Y1(_02,_12,_22){if(_02===this._U1&&_12===this._V1&&_22===this._W1)return;const _32=2*Math.PI*_02/sampleRate;const _42=Math.cos(_32);const _52=Math.sqrt(_22);const _62=_52+1;const _72=_52-1;const _82=_62*_42;const _92=_72*_42;const _a2=_62-_92;const _b2=_62+_92;const alpha=Math.sin(_32)/(2*_12);const _c2=(2*Math.sqrt(_52)*alpha);const _d2=_b2+_c2;
const _L1=-2*(_72+_82);const _M1=_b2-_c2;const _N1=_52*(_a2+_c2);const _O1=2*_52*(_72-_82);const _P1=_52*(_a2-_c2);this._L1=_L1/_d2;this._M1=_M1/_d2;this._N1=_N1/_d2;this._O1=_O1/_d2;this._P1=_P1/_d2;this._U1=_02;this._V1=_12;this._W1=_22;}}registerProcessor("lo-shelf-processor",_i2);class _j2 extends AudioWorkletProcessor{static get parameterDescriptors(){const _f2=sampleRate*0.45;return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"cutoff",automationRate:"a-rate",defaultValue:Math.min(500.0,
_f2),minValue:10.0,maxValue:_f2},{name:"q",automationRate:"a-rate",defaultValue:1.5,minValue:1.0,maxValue:100.0}];}constructor(_D){super();this._n();const _E=_D.outputChannelCount[0];this._L1=0;this._M1=0;this._N1=0;this._O1=0;this._P1=0;this._Q1=new Float32Array(_E);this._R1=new Float32Array(_E);this._S1=new Float32Array(_E);this._T1=new Float32Array(_E);this._g2=-1;this._V1=-1;}process(_r,_s,parameters){const input=_r[0];const output=_s[0];const bypass=parameters.bypass;const cutoff=parameters.cutoff;const q=parameters.q;
const _X1=(cutoff.length===1&&q.length===1);if(_X1)this._Y1(cutoff[0],q[0]);for(let c=0;c<input.length;++c){const _t=input[c];const _z=output[c];for(let _u=0;_u<_t.length;++_u){if(_X1===false){const c=(cutoff[_u]!==undefined)?cutoff[_u]:cutoff[0];const _Z1=(q[_u]!==undefined)?q[_u]:q[0];this._Y1(c,_Z1);}const __1=this._N1*_t[_u]+this._O1*this._Q1[c]+this._P1*this._R1[c]-this._L1*this._S1[c]-this._M1*this._T1[c];this._R1[c]=this._Q1[c];this._Q1[c]=_t[_u];this._T1[c]=this._S1[c];this._S1[c]=__1;const _v=(bypass[_u]!==undefined)?bypass[_u]:bypass[0];
_z[_u]=(_v>0)?_t[_u]:__1;}}return this._o;}_Y1(_h2,_12){if(_h2===this._g2&&_12===this._V1)return;const _32=2*Math.PI*_h2/sampleRate;const alpha=Math.sin(_32)/(2*_12);const _42=Math.cos(_32);const _d2=1+alpha;const _L1=-2*_42;const _M1=1-alpha;const _N1=(1-_42)/2;const _O1=1-_42;const _P1=(1-_42)/2;this._L1=_L1/_d2;this._M1=_M1/_d2;this._N1=_N1/_d2;this._O1=_O1/_d2;this._P1=_P1/_d2;this._g2=_h2;this._V1=_12;}}registerProcessor("lpf2-processor",_j2);class _k2 extends AudioWorkletProcessor{static get parameterDescriptors(){
const _K1=sampleRate*0.45;return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"freq",automationRate:"a-rate",defaultValue:Math.min(1500.0,_K1),minValue:10.0,maxValue:_K1},{name:"q",automationRate:"a-rate",defaultValue:1.0,minValue:1.0,maxValue:100.0},{name:"gain",automationRate:"a-rate",defaultValue:1e-2,minValue:1e-6}];}constructor(_D){super();this._n();const _E=_D.outputChannelCount[0];this._L1=0;this._M1=0;this._N1=0;this._O1=0;this._P1=0;this._Q1=new Float32Array(_E);
this._R1=new Float32Array(_E);this._S1=new Float32Array(_E);this._T1=new Float32Array(_E);this._U1=-1;this._V1=-1;this._W1=-1;}process(_r,_s,parameters){const input=_r[0];const output=_s[0];const bypass=parameters.bypass;const freq=parameters.freq;const q=parameters.q;const gain=parameters.gain;const _X1=(freq.length===1&&q.length===1&&gain.length===1);if(_X1)this._Y1(freq[0],q[0],gain[0]);for(let c=0;c<input.length;++c){const _t=input[c];const _z=output[c];for(let _u=0;_u<_t.length;++_u){if(_X1===false){const _H=(freq[_u]!==undefined)?freq[_u]:freq[0];
const _Z1=(q[_u]!==undefined)?q[_u]:q[0];const _A=(gain[_u]!==undefined)?gain[_u]:gain[0];this._Y1(_H,_Z1,_A);}const __1=this._N1*_t[_u]+this._O1*this._Q1[c]+this._P1*this._R1[c]-this._L1*this._S1[c]-this._M1*this._T1[c];this._R1[c]=this._Q1[c];this._Q1[c]=_t[_u];this._T1[c]=this._S1[c];this._S1[c]=__1;const _v=(bypass[_u]!==undefined)?bypass[_u]:bypass[0];_z[_u]=(_v>0)?_t[_u]:__1;}}return this._o;}_Y1(_02,_12,_22){if(_02===this._U1&&_12===this._V1&&_22===this._W1)return;const _32=2*Math.PI*_02/sampleRate;
const _42=Math.cos(_32);const _52=Math.sqrt(_22);const alpha=Math.sin(_32)/(2*_12);const _l2=alpha/_52;const _m2=alpha*_52;const _d2=1+_l2;const _L1=-2*_42;const _M1=1-_l2;const _N1=1+_m2;const _O1=_L1;const _P1=1-_m2;this._L1=_L1/_d2;this._M1=_M1/_d2;this._N1=_N1/_d2;this._O1=_O1/_d2;this._P1=_P1/_d2;this._U1=_02;this._V1=_12;this._W1=_22;}}registerProcessor("peak-eq-processor",_k2);class _n2{constructor(_o2){this._p2=0;this._q2=0;this.feedback=0;this._r2=0;this.buffer=new Float32Array(_o2);this._s2=0;}process(_w1){
const out=this.buffer[this._s2];this._r2=(this._r2*this._p2)+(out*this._q2);this.buffer[this._s2]=_w1+(this._r2*this.feedback);++this._s2;this._s2%=this.buffer.length;return out;}_t2(_u2){this.feedback=Math.min(Math.max(0,_u2),1);}_v2(_w2){this._p2=Math.min(Math.max(0,_w2),1);this._q2=1-this._p2;}}class _x2{constructor(_o2){this.feedback=0;this.buffer=new Float32Array(_o2);this._s2=0;}process(_w1){const out=this.buffer[this._s2];this.buffer[this._s2]=_w1+(out*this.feedback);++this._s2;this._s2%=this.buffer.length;
return(out-_w1);}_t2(_u2){this.feedback=Math.min(Math.max(0,_u2),1);}}class _y2 extends AudioWorkletProcessor{static _z2=8;static _A2=4;static _B2=0.015;static _C2=0.4;static _D2=0.28;static _E2=0.7;static _F2=[1116,1188,1277,1356,1422,1491,1557,1617];static _G2=[1139,1211,1300,1379,1445,1514,1580,1640];static _H2=[556,441,341,225];static _I2=[579,464,364,248];static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"size",automationRate:"a-rate",
defaultValue:0.7,minValue:0.0,maxValue:1.0},{name:"damp",automationRate:"a-rate",defaultValue:0.1,minValue:0.0,maxValue:1.0},{name:"mix",automationRate:"a-rate",defaultValue:0.35,minValue:0.0,maxValue:1.0}];}constructor(_D){super();this._n();const _E=_D.outputChannelCount[0];this._J2=-1;this._K2=-1;this._L2=new Array(_E);this._M2=new Array(_E);const _N2=[_y2._F2,_y2._G2];const _O2=[_y2._H2,_y2._I2];for(let c=0;c<_E;++c){this._L2[c]=new Array(_y2._z2);this._M2[c]=new Array(_y2._A2);for(let i=0;i<_y2._z2;++i)this._L2[c][i]=new _n2(_N2[c%_N2.length][i]);
for(let i=0;i<_y2._A2;++i)this._M2[c][i]=new _x2(_O2[c%_O2.length][i]);}this._P2(0.5);this._v2(0.5);for(let c=0;c<_E;++c)for(let i=0;i<_y2._A2;++i)this._M2[c][i]._t2(0.5);}process(_r,_s,parameters){const input=_r[0];const output=_s[0];const bypass=parameters.bypass;const size=parameters.size;const damp=parameters.damp;const mix=parameters.mix;for(let c=0;c<input.length;++c){const _t=input[c];const _z=output[c];for(let _Q2=0;_Q2<_t.length;++_Q2){const _u=(size[_Q2]!==undefined)?size[_Q2]:size[0];const _R2=(damp[_Q2]!==undefined)?damp[_Q2]:damp[0];
this._P2(_u);this._v2(_R2);_z[_Q2]=_t[_Q2];let out=0;const _I=_t[_Q2]*_y2._B2;for(let i=0;i<_y2._z2;++i)out+=this._L2[c][i].process(_I);for(let i=0;i<_y2._A2;++i)out=this._M2[c][i].process(out);const _v=(bypass[_Q2]!==undefined)?bypass[_Q2]:bypass[0];if(_v>0.0){continue;}const _K=(mix[_Q2]!==undefined)?mix[_Q2]:mix[0];_z[_Q2]*=(1-_K);_z[_Q2]+=(out*_K);}}return this._o;}_P2(_o2){if(_o2===this._J2)return;const size=(_o2*_y2._D2)+_y2._E2;for(let c=0;c<this._L2.length;++c)for(let i=0;i<_y2._z2;++i)this._L2[c][i]._t2(size);
this._J2=_o2;}_v2(_w2){if(_w2===this._K2)return;const damp=_w2*_y2._C2;for(let c=0;c<this._L2.length;++c)for(let i=0;i<_y2._z2;++i)this._L2[c][i]._v2(damp);this._K2=_w2;}}registerProcessor("reverb1-processor",_y2);class _S2 extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"rate",automationRate:"a-rate",defaultValue:5.0,minValue:0.0,maxValue:20.0},{name:"intensity",automationRate:"a-rate",defaultValue:1.0,
minValue:0.0,maxValue:1.0},{name:"offset",automationRate:"a-rate",defaultValue:0.0,minValue:0.0,maxValue:1.0},{name:"shape",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:4}];}constructor(_D){super();this._n();const _E=_D.outputChannelCount[0];this._T2=new Array(_E).fill(1.0);this._U2=new Array(_E).fill(0.0);this._V2=new Array(_E).fill(_W2._X2._Y2);this._Z2=new Array(_E);for(let c=0;c<_E;++c){this._Z2[c]=new __2();this._Z2[c]._03(sampleRate);this._Z2[c]._13(this._T2[c]);this._Z2[c]._23(this._V2[c]);
if(c%2===1){this._Z2[c]._33(this._U2[c]);}}}process(_r,_s,parameters){const input=_r[0];const output=_s[0];const bypass=parameters.bypass;const rate=parameters.rate;const intensity=parameters.intensity;const offset=parameters.offset;const shape=parameters.shape;for(let c=0;c<input.length;++c){const _t=input[c];const _z=output[c];for(let _u=0;_u<_t.length;++_u){_z[_u]=_t[_u];const _J=(rate[_u]!==undefined)?rate[_u]:rate[0];const _43=(offset[_u]!==undefined)?offset[_u]:offset[0];const _53=(shape[_u]!==undefined)?shape[_u]:shape[0];
this._63(c,_J,_43,_53);const _73=this._Z2[c]._o1();const _v=(bypass[_u]!==undefined)?bypass[_u]:bypass[0];if(_v>0.0){continue;}const i=(intensity[_u]!==undefined)?intensity[_u]:intensity[0];const out=_t[_u]*_73*i;_z[_u]*=(1.0-i);_z[_u]+=out;}}return this._o;}_63(_q1,_83,_93,_a3){if(_83!==this._T2[_q1]){this._Z2[_q1]._13(_83);this._T2[_q1]=_83;}if(_93!==this._U2[_q1]){if(_q1%2===1){this._Z2[_q1]._33(_93);}this._U2[_q1]=_93;}if(_a3!==this._V2[_q1]){this._Z2[_q1]._23(_a3);this._V2[_q1]=_a3;}}}registerProcessor("tremolo-processor",
_S2);function _W2(){}_W2._X2={_Y2:0,_b3:1,_c3:2,_d3:3,_e3:4,_f3:5};_W2._g3=function(_h3){return 1.0-_h3;};_W2._i3=function(_h3){return _h3;};_W2._j3=function(_h3){return 0.5*(Math.sin((_h3*2.0*Math.PI)-(Math.PI/2.0))+1.0);};_W2._k3=function(_h3){if(_h3<0.5){return 0.0;}return 1.0;};_W2._l3=function(_h3){if(_h3<0.5){return 2.0*_h3;}return 2.0-(2.0*_h3);};_W2._m3=[_W2._g3,_W2._i3,_W2._j3,_W2._k3,_W2._l3];_n3._o3=512;_n3._p3=1.0/_n3._o3;function _n3(_q3){this.data=new Float32Array(_n3._o3);for(let i=0;i<_n3._o3;
++i){this.data[i]=_q3(i*_n3._p3);}}_n3.prototype._o1=function(_h3){_h3=Math.max(0.0,_h3);_h3=Math.min(_h3,1.0);const _r3=_h3*_n3._o3;const _s3=~~_r3;const _t3=_r3-_s3;let _s1=_s3;let _t1=_s1+1;if(_s1>=_n3._o3){_s1-=_n3._o3;}if(_t1>=_n3._o3){_t1-=_n3._o3;}const _u1=this.data[_s1];const _v1=this.data[_t1];return _u1+(_v1-_u1)*_t3;};__2._u3=[];__2._v3=false;__2._w3=0.0;__2._K1=20.0;function __2(){this._x3=48000;this.shape=_W2._X2._c3;this.freq=1.0;this._y3=0.0;this._p3=0.0;this._z3=0.0;if(__2._v3==true){return;
}for(let i=0;i<_W2._X2._f3;++i){__2._u3[i]=new _n3(_W2._m3[i]);}__2._v3=true;}__2._A3=function(){return(__2._v3==true);};__2.prototype._03=function(_B3){this._x3=_B3;this._C3();};__2.prototype._13=function(_02){_02=Math.max(__2._w3,_02);_02=Math.min(_02,__2._K1);this.freq=_02;this._C3();};__2.prototype._33=function(_93){_93=Math.max(0.0,_93);_93=Math.min(_93,1.0);const _D3=_93-this._z3;this._z3=_93;this._y3+=_D3;while(this._y3>=1.0){this._y3-=1.0;}while(this._y3<0.0){this._y3+=1.0;}};__2.prototype._23=function(_a3){
_a3=Math.max(0,_a3);_a3=Math.min(_a3,_W2._X2._f3-1);this.shape=_a3;};__2.prototype._o1=function(){const result=__2._u3[this.shape]._o1(this._y3);this._y3+=this._p3;while(this._y3>=1.0){this._y3-=1.0;}return result;};__2.prototype._C3=function(){this._p3=this.freq/this._x3;};